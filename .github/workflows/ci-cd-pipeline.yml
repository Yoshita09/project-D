name: Advanced Drone Surveillance System - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint
          pip install -r backend/ai_module/requirements.txt

      - name: Install Node.js dependencies
        run: |
          npm ci
          cd drone-surveillance && npm ci

      - name: Run Python linting
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check backend/
          isort --check-only backend/
          mypy backend/ai_module/

      - name: Run JavaScript linting
        run: |
          npm run lint
          cd drone-surveillance && npm run lint

      - name: Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scannerHome: ${{ github.workspace }}/.sonar/scanner
          args: >
            -Dsonar.projectKey=drone-surveillance
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

  # Unit and Integration Testing
  test:
    name: Comprehensive Testing Suite
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov aiohttp
          pip install -r backend/ai_module/requirements.txt

      - name: Install Node.js dependencies
        run: |
          npm ci
          cd drone-surveillance && npm ci

      - name: Run Python unit tests
        run: |
          cd tests
          pytest test_ai_module.py -v --cov=../backend/ai_module --cov-report=xml --cov-report=html

      - name: Run Node.js unit tests
        run: |
          npm test
          cd drone-surveillance && npm test

      - name: Run integration tests
        run: |
          python integration-test.js
          python test-fastapi-service.py
          python test-yolov8-backend.py

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./tests/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Performance Testing
  performance-test:
    name: Performance and Load Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install performance testing tools
        run: |
          pip install locust artillery

      - name: Run performance tests
        run: |
          # Start services in background
          cd backend && python -m uvicorn ai_module.main:app --host 0.0.0.0 --port 5800 &
          cd backend && node index.js &

          # Wait for services to start
          sleep 30

          # Run performance tests
          locust -f performance_tests/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 60s

          # Run API load tests
          artillery run performance_tests/artillery-config.yml

      - name: Generate performance report
        run: |
          python backend/monitoring/performance_monitor.py --generate-report

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push AI Module image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.ai
          push: true
          tags: ${{ steps.meta.outputs.tags }}-ai
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./drone-surveillance
          file: ./drone-surveillance/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results.sarif"

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [docker-build, test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          # Deploy to staging environment
          echo "Deploying to staging environment..."

          # Set environment variables
          export STAGING_HOST=${{ secrets.STAGING_HOST }}
          export STAGING_USER=${{ secrets.STAGING_USER }}
          export STAGING_KEY=${{ secrets.STAGING_SSH_KEY }}

          # Deploy using Docker Compose
          ssh -i $STAGING_KEY $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /opt/drone-surveillance
            docker-compose pull
            docker-compose up -d
            docker-compose exec -T backend python -m pytest tests/
          EOF

      - name: Run smoke tests on staging
        run: |
          # Wait for deployment to complete
          sleep 60

          # Run smoke tests
          curl -f http://${{ secrets.STAGING_HOST }}/health || exit 1
          curl -f http://${{ secrets.STAGING_HOST }}:5800/health || exit 1

  # Deployment to Production
  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: [docker-build, test, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          # Deploy to production environment
          echo "Deploying to production environment..."

          # Set environment variables
          export PROD_HOST=${{ secrets.PROD_HOST }}
          export PROD_USER=${{ secrets.PROD_USER }}
          export PROD_KEY=${{ secrets.PROD_SSH_KEY }}

          # Deploy using Docker Compose
          ssh -i $PROD_KEY $PROD_USER@$PROD_HOST << 'EOF'
            cd /opt/drone-surveillance
            docker-compose pull
            docker-compose up -d
            docker-compose exec -T backend python -m pytest tests/
          EOF

      - name: Run production health checks
        run: |
          # Wait for deployment to complete
          sleep 120

          # Run comprehensive health checks
          curl -f http://${{ secrets.PROD_HOST }}/health || exit 1
          curl -f http://${{ secrets.PROD_HOST }}:5800/health || exit 1
          curl -f http://${{ secrets.PROD_HOST }}:5100/health || exit 1
          curl -f http://${{ secrets.PROD_HOST }}:5200/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)

  # Security Compliance Check
  security-compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Run dependency vulnerability check
        run: |
          npm audit --audit-level moderate
          cd drone-surveillance && npm audit --audit-level moderate
          pip install safety
          safety check

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: HEAD~1

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install documentation tools
        run: |
          pip install sphinx sphinx-rtd-theme
          npm install -g jsdoc

      - name: Generate API documentation
        run: |
          # Generate OpenAPI documentation
          curl http://localhost:5800/openapi.json > docs/api/openapi.json

          # Generate Python documentation
          cd backend/ai_module
          sphinx-apidoc -o docs/source/ .
          cd docs && make html

      - name: Generate system documentation
        run: |
          # Generate system architecture diagrams
          python scripts/generate_docs.py

          # Generate deployment guides
          python scripts/generate_deployment_guide.py

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/build/html/

  # Final Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build, deploy-staging]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ Tests passed"

      - name: Check security scan results
        run: |
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ Security scan passed"

      - name: Check Docker build results
        run: |
          if [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          echo "✅ Docker build passed"

      - name: Generate quality report
        run: |
          echo "## Quality Gate Report" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Staging Deployment: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any critical step failed
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Quality gate failed - one or more critical steps failed"
          exit 1
